{"version":3,"file":"b2s-controller.js","sourceRoot":"","sources":["../../../src/scraper/b2s-controller.ts"],"names":[],"mappings":";AAMA,uCAAuC;AACvC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAEnC;IAKI,qEAAqE;IACrE,YAAY,OAA8B;QACtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,4BAA4B;IAChC,CAAC;IAEM,aAAa,CAAC,GAAiB,EAAE,KAAkB;QAIxD,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;QACjC,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QAEzB,IAAI,CAAC,GAAG,IAAI,OAAO,CAAC;YAClB,cAAc,EAAG,EAAE;YACnB,4CAA4C;YAC5C,QAAQ,EAAG,UAAU,KAAK,EAAE,GAAG,EAAE,IAAI;gBACnC,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;oBACR,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACrB,CAAC;gBAAA,IAAI,CAAA,CAAC;oBACJ,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBACd,0BAA0B;oBAC1B,2EAA2E;oBAC3E,mEAAmE;oBAGnE,oEAAoE;oBACpE,8CAA8C;oBAG9C,CAAC,CAAC,6BAA6B,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAG9C,IAAI,IAAI,GAAG,IAAI,OAAO,CAAC;4BACrB,cAAc,EAAG,EAAE;4BACnB,4CAA4C;4BAC5C,QAAQ,EAAG,UAAU,KAAK,EAAE,GAAG,EAAE,IAAI;gCACnC,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;oCACR,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gCACrB,CAAC;gCAAA,IAAI,CAAA,CAAC;oCACJ,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oCACd,0BAA0B;oCAC1B,2EAA2E;oCAC3E,mEAAmE;oCAGnE,oEAAoE;oCACpE,8CAA8C;oCAG9C,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;gCAY1D,CAAC;gCACD,IAAI,EAAE,CAAC;4BACT,CAAC;yBACF,CAAC,CAAC;wBAIH,IAAI,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBAEvC,IAAI,CAAC,KAAK,CAAC,uBAAuB,GAAC,WAAW,CAAC,CAAC;wBAuBhD,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,WAAW,CAAC,CAAC;wBAG3C,wCAAwC;oBAC1C,CAAC,CAAC,CAAC;gBAGL,CAAC;gBACD,IAAI,EAAE,CAAC;YACT,CAAC;SACF,CAAC,CAAC;QAET,4CAA4C;QACtC,CAAC,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAEvC,uBAAuB;QACvB,oEAAoE;QAEpE,mDAAmD;QACnD,mBAAmB;QACnB,2CAA2C;QAC3C,yBAAyB;QACzB,EAAE;QACF,iDAAiD;QACjD,kDAAkD;QAClD,uBAAuB;QACvB,kCAAkC;QAClC,mBAAmB;QACnB,gEAAgE;QAChE,cAAc;QACd,oBAAoB;QACpB,YAAY;QACZ,aAAa;QAEP,KAAK,CAAC,IAAI,CAAC,CAAC;QAkBZ,iJAAiJ;QACjJ,EAAE;QACF,+BAA+B;QAC/B,yBAAyB;QACzB,iDAAiD;QACjD,6CAA6C;QAC7C,EAAE;QACF,iCAAiC;QACjC,kFAAkF;QAClF,MAAM;QACN,MAAM;QACN,EAAE;QACF,EAAE;QACF,kBAAkB;QAClB,2BAA2B;QAC3B,0CAA0C;QAC1C,iIAAiI;QACjI,2CAA2C;QAC3C,wBAAwB;QACxB,4BAA4B;QAC5B,eAAe;QACf,QAAQ;QACR,EAAE;QACF,6BAA6B;QAC7B,qBAAqB;QACrB,+DAA+D;QAC/D,uDAAuD;QACvD,mCAAmC;QACnC,wCAAwC;QACxC,qEAAqE;QACrE,uDAAuD;QACvD,+DAA+D;QAC/D,EAAE;QACF,yBAAyB;QACzB,yBAAyB;QACzB,uBAAuB;QACvB,2BAA2B;QAC3B,uBAAuB;QACvB,sBAAsB;QACtB,WAAW;QACX,EAAE;QACF,qCAAqC;QACrC,EAAE;QACF,UAAU;QAKV,0CAA0C;QAC1C,EAAE;QACF,uFAAuF;QACvF,uGAAuG;QACvG,0CAA0C;QAC1C,EAAE;QACF,kBAAkB;QAClB,wBAAwB;QACxB,uCAAuC;QACvC,0CAA0C;QAC1C,wBAAwB;QACxB,6BAA6B;QAC7B,IAAI;QACJ,EAAE;QACF,0CAA0C;QAC1C,EAAE;QACF,uBAAuB;QAGvB,4DAA4D;QAC5D,EAAE;QACF,sCAAsC;QACtC,+BAA+B;QAC/B,EAAE;QACF,mBAAmB;QAEnB,oCAAoC;QACpC,oDAAoD;QACpD,EAAE;QACF,gDAAgD;QAChD,gBAAgB;QAChB,kCAAkC;QAClC,EAAE;QACF,kCAAkC;QAClC,2DAA2D;QAC3D,EAAE;QACF,gEAAgE;QAChE,EAAE;QACF,sCAAsC;QACtC,EAAE;QACF,gGAAgG;QAChG,EAAE;QACF,4BAA4B;QAC5B,EAAE;QACF,iHAAiH;QACjH,mGAAmG;QACnG,EAAE;QACF,gDAAgD;QAChD,EAAE;QACF,0EAA0E;QAC1E,EAAE;QACF,4BAA4B;QAC5B,SAAS;QACT,MAAM;QACN,MAAM;QAIN,wFAAwF;QACxF,EAAE;QACF,kDAAkD;QAClD,kBAAkB;QAClB,kCAAkC;QAClC,2EAA2E;QAC3E,EAAE;QACF,mEAAmE;QACnE,aAAa;QACb,2DAA2D;QAC3D,MAAM;QACN,MAAM;QAGJ,4CAA4C;QAC5C,+BAA+B;QAC/B,iCAAiC;QAEjC,oHAAoH;QACpH,oBAAoB;QACpB,wBAAwB;QACxB,4CAA4C;QAC5C,MAAM;IACV,CAAC;AA6EL,CAAC;AArWD;+BAqWC,CAAA","sourcesContent":["import * as Hapi from \"hapi\";\nimport * as cheerio from \"cheerio\";\nimport * as Boom from \"boom\";\n// import { ICategory } from \"./category\";\n// import { IDatabase } from \"../database\";\nimport { IServerConfigurations } from \"../configurations\";\n// import request = require(\"request\");\nconst Crawler = require(\"crawler\");\n\nexport default class B2SController {\n\n    // private database: IDatabase;\n    private configs: IServerConfigurations;\n\n    // constructor(configs: IServerConfigurations, database: IDatabase) {\n    constructor(configs: IServerConfigurations) {\n        this.configs = configs;\n        // this.database = database;\n    }\n\n    public getCategories(req: Hapi.Request, reply: Hapi.IReply) {\n\n\n\n      var Crawler = require(\"crawler\");\n      var url = require('url');\n\n      var c = new Crawler({\n        maxConnections : 10,\n        // This will be called for each crawled page\n        callback : function (error, res, done) {\n          if(error){\n            console.log(error);\n          }else{\n            var $ = res.$;\n            // $ is Cheerio by default\n            //a lean implementation of core jQuery designed specifically for the server\n            //console.log(\"Value: \" + $(\".row-fluid.padding-m-bottom\").html());\n\n\n            // console.log(\"Value: \" + $(\".row-fluid.padding-m-bottom\").html());\n            // ('#blogPagination').find('a').attr('href');\n\n\n            $('.row-fluid.padding-m-bottom').find('a').each(function() {\n\n\n              var cSub = new Crawler({\n                maxConnections : 10,\n                // This will be called for each crawled page\n                callback : function (error, res, done) {\n                  if(error){\n                    console.log(error);\n                  }else{\n                    var $ = res.$;\n                    // $ is Cheerio by default\n                    //a lean implementation of core jQuery designed specifically for the server\n                    //console.log(\"Value: \" + $(\".row-fluid.padding-m-bottom\").html());\n\n\n                    // console.log(\"Value: \" + $(\".row-fluid.padding-m-bottom\").html());\n                    // ('#blogPagination').find('a').attr('href');\n\n\n                    console.log(\"Sub Category: \" + $(\".menu-title\").html());\n\n                    // $('.menu-title').find('a').each(function() {\n                    //\n                    //   var categoryUrl = $(this).attr('href');\n                    //\n                    //   console.log(categoryUrl);\n                    //\n                    //   //console.log($(this).find('p').html());\n                    // });\n\n\n                  }\n                  done();\n                }\n              });\n\n\n\n              var categoryUrl = $(this).attr('href');\n\n              cSub.queue('http://www.bestbuy.ca'+categoryUrl);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              console.log(\"Category URL:\" + categoryUrl);\n\n\n              //console.log($(this).find('p').html());\n            });\n\n\n          }\n          done();\n        }\n      });\n\n// Queue just one URL, with default callback\n      c.queue('http://www.bestbuy.ca');\n\n// Queue a list of URLs\n//       c.queue(['http://www.google.com/','http://www.yahoo.com']);\n\n// // Queue URLs with custom callbacks & parameters\n//       c.queue([{\n//         uri: 'http://parishackers.org/',\n//         jQuery: false,\n//\n//         // The global callback won't be called\n//         callback: function (error, res, done) {\n//           if(error){\n//             console.log(error);\n//           }else{\n//             console.log('Grabbed', res.body.length, 'bytes');\n//           }\n//           done();\n//         }\n//       }]);\n\n      reply('ok');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      // const UserAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36';\n      //\n      // const dcCraw = new Crawler({\n      //   maxConnections : 10,\n      //   // This will be called for each crawled page\n      //   callback : function (error, result, $) {\n      //\n      //     // $ is Cheerio by default\n      //     //a lean implementation of core jQuery designed specifically for the server\n      //   }\n      // });\n      //\n      //\n      // dcCraw.queue([{\n      //   userAgent : UserAgent,\n      //   referer : 'https://search.naver.com',\n      //   uri : 'https://search.naver.com/search.naver?ie=utf8&where=news&query=%EB%B0%95%EB%B3%B4%EA%B2%80&sm=tab_tmr&frm=mr&sort=0',\n      //   callback : function(error, result, $){\n      //     if(error || !$) {\n      //       console.log(error);\n      //       return\n      //     }\n      //\n      //     var templateList = [];\n      //     var count = 0;\n      //     $('body').find('.type01').children().each(function(idx){\n      //       var $title =  $(this).find('._sp_each_title');\n      //       var title = $title.text();\n      //       var link = $title.attr('href');\n      //       var imgSrc = $(this).find('.thumb').find('img').attr('src');\n      //       var time = $(this).find('.txt_inline').text();\n      //       var desc = $(this).find('dl').children().eq(2).text();\n      //\n      //       var template = {\n      //         title : title,\n      //         link : link,\n      //         imgSrc : imgSrc,\n      //         time : time,\n      //         desc : desc\n      //       };\n      //\n      //       templateList.push(template);\n      //\n      //     });\n\n\n\n\n      // var goldwasher = require('goldwasher');\n      //\n      // var html = '<a href=\"/oak/strong\"><h1>Oak is strong and also gives shade.</h1></a>';\n      // html += '<h2><a href=\"http://www.catsanddogs.com/hate\">Cats and dogs each hate the other.</a></h2>';\n      // html += '<h2>Some unwanted text.</h2>';\n      //\n      // var options = {\n      //   selector: 'h1, h2',\n      //   url: 'http://www.oakisstrong.com',\n      //   filterTexts: ['Some unwanted text.'],\n      //   filterLocale: 'en',\n      //   filterKeywords: ['also']\n      // }\n      //\n      // var result = goldwasher(html, options);\n      //\n      // console.log(result);\n\n\n      // $ = cheerio.load('<h2 class = \"title\">Hello world</h2>');\n      //\n      // $('h2.title').text('Hello there!');\n      // $('h2').addClass('welcome');\n      //\n      // reply($.html());\n\n      // var request = require('request');\n      // let url = 'http://www.imdb.com/title/tt1229340/';\n      //\n      // request(url, function(error, response, html){\n      //   if(!error){\n      //     var $ = cheerio.load(html);\n      //\n      //     var title, release, rating;\n      //     var json = { title : \"\", release : \"\", rating : \"\"};\n      //\n      //     // We'll use the unique header class as a starting point.\n      //\n      //     $('.header').filter(function(){\n      //\n      //       // Let's store the data we filter into a variable so we can easily see what's going on.\n      //\n      //       var data = $(this);\n      //\n      //       // In examining the DOM we notice that the title rests within the first child element of the header tag.\n      //       // Utilizing jQuery we can easily navigate and get the text by writing the following code:\n      //\n      //       title = data.children().first().text();\n      //\n      //       // Once we have our title, we'll store it to the our json object.\n      //\n      //       json.title = title;\n      //     })\n      //   }\n      // });\n\n\n\n      // let url = \"http://www.wunderground.com/cgi-bin/findweather/getForecast?&query=02888\";\n      //\n      // request(url, function (error, response, body) {\n      //   if (!error) {\n      //     var $ = cheerio.load(body),\n      //       temperature = $(\"[data-variable='temperature'] .wx-value\").html();\n      //\n      //     console.log(\"It’s \" + temperature + \" degrees Fahrenheit.\");\n      //   } else {\n      //     console.log(\"We’ve encountered an error: \" + error);\n      //   }\n      // });\n\n\n        // let userId = request.auth.credentials.id;\n        // let top = request.query.top;\n        // let skip = request.query.skip;\n\n        // this.database.taskModel.find({ userId: userId }).lean(true).skip(skip).limit(top).then((tasks: Array<ITask>) => {\n        //     reply(tasks);\n        // }).catch((error) => {\n        //     reply(Boom.badImplementation(error));\n        // });\n    }\n\n\n\n    // public createTask(request: Hapi.Request, reply: Hapi.IReply) {\n    //     let userId = request.auth.credentials.id;\n    //     var newTask: ICategory = request.payload;\n    //     newTask.userId = userId;\n\n    //     // this.database.taskModel.create(newTask).then((task) => {\n    //     //     reply(task).code(201);\n    //     // }).catch((error) => {\n    //     //     reply(Boom.badImplementation(error));\n    //     // });\n    // }\n\n    // public updateTask(request: Hapi.Request, reply: Hapi.IReply) {\n    //     let userId = request.auth.credentials.id;\n    //     let id = request.params[\"id\"];\n    //     let task: ITask = request.payload;\n\n    //     this.database.taskModel.findByIdAndUpdate({ _id: id, userId: userId }, { $set: task }, { new: true })\n    //         .then((updatedTask: ITask) => {\n    //             if (updatedTask) {\n    //                 reply(updatedTask);\n    //             } else {\n    //                 reply(Boom.notFound());\n    //             }\n    //         }).catch((error) => {\n    //             reply(Boom.badImplementation(error));\n    //         });\n    // }\n\n    // public deleteTask(request: Hapi.Request, reply: Hapi.IReply) {\n    //     let id = request.params[\"id\"];\n    //     let userId = request.auth.credentials.id;\n\n    //     this.database.taskModel.findOneAndRemove({ _id: id, userId: userId }).then((deletedTask: ITask) => {\n    //         if (deletedTask) {\n    //             reply(deletedTask);\n    //         } else {\n    //             reply(Boom.notFound());\n    //         }\n    //     }).catch((error) => {\n    //         reply(Boom.badImplementation(error));\n    //     });\n    // }\n\n    // public getTaskById(request: Hapi.Request, reply: Hapi.IReply) {\n    //     let userId = request.auth.credentials.id;\n    //     let id = request.params[\"id\"];\n\n    //     this.database.taskModel.findOne({ _id: id, userId: userId }).lean(true).then((task: ITask) => {\n    //         if (task) {\n    //             reply(task);\n    //         } else {\n    //             reply(Boom.notFound());\n    //         }\n    //     }).catch((error) => {\n    //         reply(Boom.badImplementation(error));\n    //     });\n    // }\n\n    // public getTasks(request: Hapi.Request, reply: Hapi.IReply) {\n    //     let userId = request.auth.credentials.id;\n    //     let top = request.query.top;\n    //     let skip = request.query.skip;\n\n    //     this.database.taskModel.find({ userId: userId }).lean(true).skip(skip).limit(top).then((tasks: Array<ITask>) => {\n    //         reply(tasks);\n    //     }).catch((error) => {\n    //         reply(Boom.badImplementation(error));\n    //     });\n    // }\n\n\n\n}\n"]}