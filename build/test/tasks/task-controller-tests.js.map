{"version":3,"file":"task-controller-tests.js","sourceRoot":"","sources":["../../../test/tasks/task-controller-tests.ts"],"names":[],"mappings":"AAAA,gCAAgC;AAChC,gEAAgE;AAChE,gDAAgD;AAChD,gDAAgD;AAChD,uDAAuD;AACvD,8CAA8C;AAC9C,kDAAkD;AAClD,qCAAqC;AAErC,gDAAgD;AAChD,4CAA4C;AAC5C,8BAA8B;AAC9B,mDAAmD;AACnD,sDAAsD;AAEtD,2CAA2C;AAE3C,6BAA6B;AAC7B,oDAAoD;AACpD,UAAU;AAEV,4BAA4B;AAC5B,+CAA+C;AAC/C,UAAU;AAEV,kCAAkC;AAClC,8CAA8C;AAE9C,qIAAqI;AACrI,iDAAiD;AACjD,wDAAwD;AAExD,oHAAoH;AACpH,qDAAqD;AACrD,4EAA4E;AAC5E,wDAAwD;AACxD,0BAA0B;AAC1B,kBAAkB;AAClB,cAAc;AACd,UAAU;AAEV,wCAAwC;AACxC,8CAA8C;AAE9C,qIAAqI;AACrI,iDAAiD;AACjD,wDAAwD;AAExD,8DAA8D;AAC9D,oIAAoI;AACpI,yDAAyD;AACzD,yEAAyE;AACzE,kEAAkE;AAClE,8BAA8B;AAC9B,sBAAsB;AACtB,kBAAkB;AAClB,cAAc;AACd,UAAU;AAEV,oCAAoC;AACpC,8CAA8C;AAE9C,qIAAqI;AACrI,iDAAiD;AACjD,wDAAwD;AAExD,wFAAwF;AACxF,sDAAsD;AAEtD,wIAAwI;AACxI,yDAAyD;AACzD,gFAAgF;AAChF,kEAAkE;AAClE,gFAAgF;AAChF,8BAA8B;AAC9B,sBAAsB;AACtB,kBAAkB;AAClB,cAAc;AACd,UAAU;AAEV,oCAAoC;AACpC,8CAA8C;AAE9C,qIAAqI;AACrI,iDAAiD;AACjD,wDAAwD;AAExD,8DAA8D;AAE9D,qCAAqC;AACrC,uCAAuC;AACvC,uCAAuC;AACvC,oDAAoD;AACpD,qBAAqB;AAErB,8IAA8I;AAC9I,iCAAiC;AACjC,6DAA6D;AAC7D,oDAAoD;AACpD,6EAA6E;AAC7E,iEAAiE;AACjE,kCAAkC;AAClC,0BAA0B;AAC1B,kBAAkB;AAClB,cAAc;AACd,UAAU;AAEV,2CAA2C;AAC3C,8CAA8C;AAE9C,qIAAqI;AACrI,iDAAiD;AACjD,wDAAwD;AAExD,8DAA8D;AAC9D,uIAAuI;AACvI,yDAAyD;AACzD,yEAAyE;AACzE,kEAAkE;AAElE,4FAA4F;AAC5F,sDAAsD;AACtD,kCAAkC;AAClC,0BAA0B;AAC1B,sBAAsB;AACtB,kBAAkB;AAClB,cAAc;AACd,UAAU;AACV,MAAM","sourcesContent":["// import * as chai from \"chai\";\n// import TaskController from \"../../src/tasks/task-controller\";\n// import { ITask } from \"../../src/tasks/task\";\n// import { IUser } from \"../../src/users/user\";\n// import * as Configs from \"../../src/configurations\";\n// import * as Server from \"../../src/server\";\n// import * as Database from \"../../src/database\";\n// import * as Utils from \"../utils\";\n\n// const configDb = Configs.getDatabaseConfig();\n// const database = Database.init(configDb);\n// const assert = chai.assert;\n// const serverConfig = Configs.getServerConfigs();\n// const server = Server.init(serverConfig, database);\n\n// describe(\"TastController Tests\", () => {\n\n//     beforeEach((done) => {\n//         Utils.createSeedTaskData(database, done);\n//     });\n\n//     afterEach((done) => {\n//         Utils.clearDatabase(database, done);\n//     });\n\n//     it(\"Get tasks\", (done) => {\n//         var user = Utils.createUserDummy();\n\n//         server.inject({ method: 'POST', url: '/users/login', payload: { email: user.email, password: user.password } }, (res) => {\n//             assert.equal(200, res.statusCode);\n//             var login: any = JSON.parse(res.payload);\n\n//             server.inject({ method: 'Get', url: '/tasks', headers: { \"authorization\": login.token } }, (res) => {\n//                 assert.equal(200, res.statusCode);\n//                 var responseBody: Array<ITask> = JSON.parse(res.payload);\n//                 assert.equal(3, responseBody.length);\n//                 done();\n//             });\n//         });\n//     });\n\n//     it(\"Get single task\", (done) => {\n//         var user = Utils.createUserDummy();\n\n//         server.inject({ method: 'POST', url: '/users/login', payload: { email: user.email, password: user.password } }, (res) => {\n//             assert.equal(200, res.statusCode);\n//             var login: any = JSON.parse(res.payload);\n\n//             database.taskModel.findOne({}).then((task) => {\n//                 server.inject({ method: 'Get', url: '/tasks/' + task._id, headers: { \"authorization\": login.token } }, (res) => {\n//                     assert.equal(200, res.statusCode);\n//                     var responseBody: ITask = JSON.parse(res.payload);\n//                     assert.equal(task.name, responseBody.name);\n//                     done();\n//                 });\n//             });\n//         });\n//     });\n\n//     it(\"Create task\", (done) => {\n//         var user = Utils.createUserDummy();\n\n//         server.inject({ method: 'POST', url: '/users/login', payload: { email: user.email, password: user.password } }, (res) => {\n//             assert.equal(200, res.statusCode);\n//             var login: any = JSON.parse(res.payload);\n\n//             database.userModel.findOne({ email: user.email }).then((user: IUser) => {\n//                 var task = Utils.createTaskDummy();\n\n//                 server.inject({ method: 'POST', url: '/tasks', payload: task, headers: { \"authorization\": login.token } }, (res) => {\n//                     assert.equal(201, res.statusCode);\n//                     var responseBody: ITask = <ITask>JSON.parse(res.payload);\n//                     assert.equal(task.name, responseBody.name);\n//                     assert.equal(task.description, responseBody.description);\n//                     done();\n//                 });\n//             });\n//         });\n//     });\n\n//     it(\"Update task\", (done) => {\n//         var user = Utils.createUserDummy();\n\n//         server.inject({ method: 'POST', url: '/users/login', payload: { email: user.email, password: user.password } }, (res) => {\n//             assert.equal(200, res.statusCode);\n//             var login: any = JSON.parse(res.payload);\n\n//             database.taskModel.findOne({}).then((task) => {\n\n//                 var updateTask = {\n//                     completed: true,\n//                     name: task.name,\n//                     description: task.description\n//                 };\n\n//                 server.inject({ method: 'PUT', url: '/tasks/' + task._id, payload: updateTask, headers: { \"authorization\": login.token } },\n//                     (res) => {\n//                         assert.equal(200, res.statusCode);\n//                         console.log(res.payload);\n//                         var responseBody: ITask = JSON.parse(res.payload);\n//                         assert.isTrue(responseBody.completed);\n//                         done();\n//                     });\n//             });\n//         });\n//     });\n\n//     it(\"Delete single task\", (done) => {\n//         var user = Utils.createUserDummy();\n\n//         server.inject({ method: 'POST', url: '/users/login', payload: { email: user.email, password: user.password } }, (res) => {\n//             assert.equal(200, res.statusCode);\n//             var login: any = JSON.parse(res.payload);\n\n//             database.taskModel.findOne({}).then((task) => {\n//                 server.inject({ method: 'DELETE', url: '/tasks/' + task._id, headers: { \"authorization\": login.token } }, (res) => {\n//                     assert.equal(200, res.statusCode);\n//                     var responseBody: ITask = JSON.parse(res.payload);\n//                     assert.equal(task.name, responseBody.name);\n\n//                     database.taskModel.findById(responseBody._id).then((deletedTask) => {\n//                         assert.isNull(deletedTask);\n//                         done();\n//                     });\n//                 });\n//             });\n//         });\n//     });\n// });\n"]}