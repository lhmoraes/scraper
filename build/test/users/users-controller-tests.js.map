{"version":3,"file":"users-controller-tests.js","sourceRoot":"","sources":["../../../test/users/users-controller-tests.ts"],"names":[],"mappings":"AAAA,gCAAgC;AAChC,gEAAgE;AAChE,gDAAgD;AAChD,uDAAuD;AACvD,8CAA8C;AAC9C,kDAAkD;AAClD,qCAAqC;AAErC,gDAAgD;AAChD,4CAA4C;AAC5C,8BAA8B;AAC9B,mDAAmD;AACnD,sDAAsD;AAEtD,2CAA2C;AAE3C,6BAA6B;AAC7B,oDAAoD;AACpD,UAAU;AAEV,4BAA4B;AAC5B,+CAA+C;AAC/C,UAAU;AAEV,oCAAoC;AACpC,uBAAuB;AACvB,sCAAsC;AACtC,kCAAkC;AAClC,iCAAiC;AACjC,aAAa;AAEb,qFAAqF;AACrF,iDAAiD;AACjD,+DAA+D;AAC/D,oDAAoD;AACpD,sBAAsB;AACtB,cAAc;AACd,UAAU;AAEV,iDAAiD;AACjD,uBAAuB;AACvB,6BAA6B;AAC7B,kCAAkC;AAClC,iCAAiC;AACjC,aAAa;AAEb,qFAAqF;AACrF,iDAAiD;AACjD,sBAAsB;AACtB,cAAc;AACd,UAAU;AAEV,oDAAoD;AACpD,wGAAwG;AACxG,iDAAiD;AACjD,sBAAsB;AACtB,cAAc;AACd,UAAU;AAEV,sCAAsC;AACtC,8CAA8C;AAE9C,qIAAqI;AACrI,iDAAiD;AACjD,wDAAwD;AAExD,yHAAyH;AACzH,qDAAqD;AACrD,4EAA4E;AAC5E,gEAAgE;AAChE,0BAA0B;AAC1B,kBAAkB;AAClB,cAAc;AACd,UAAU;AAEV,mDAAmD;AACnD,uHAAuH;AACvH,iDAAiD;AACjD,sBAAsB;AACtB,cAAc;AACd,UAAU;AAGV,oCAAoC;AACpC,8CAA8C;AAE9C,qIAAqI;AACrI,iDAAiD;AACjD,wDAAwD;AAExD,uHAAuH;AACvH,qDAAqD;AACrD,4EAA4E;AAC5E,gEAAgE;AAEhE,8FAA8F;AAC9F,kDAAkD;AAClD,8BAA8B;AAC9B,sBAAsB;AACtB,kBAAkB;AAClB,cAAc;AACd,UAAU;AAEV,yCAAyC;AACzC,8CAA8C;AAE9C,qIAAqI;AACrI,iDAAiD;AACjD,wDAAwD;AACxD,qDAAqD;AAErD,yIAAyI;AACzI,qDAAqD;AACrD,4EAA4E;AAC5E,+DAA+D;AAC/D,0BAA0B;AAC1B,kBAAkB;AAClB,cAAc;AACd,UAAU;AACV,MAAM","sourcesContent":["// import * as chai from \"chai\";\n// import UserController from \"../../src/users/user-controller\";\n// import { IUser } from \"../../src/users/user\";\n// import * as Configs from \"../../src/configurations\";\n// import * as Server from \"../../src/server\";\n// import * as Database from \"../../src/database\";\n// import * as Utils from \"../utils\";\n\n// const configDb = Configs.getDatabaseConfig();\n// const database = Database.init(configDb);\n// const assert = chai.assert;\n// const serverConfig = Configs.getServerConfigs();\n// const server = Server.init(serverConfig, database);\n\n// describe(\"UserController Tests\", () => {\n\n//     beforeEach((done) => {\n//         Utils.createSeedUserData(database, done);\n//     });\n\n//     afterEach((done) => {\n//         Utils.clearDatabase(database, done);\n//     });\n\n//     it(\"Create user\", (done) => {\n//         var user = {\n//             email: \"user@mail.com\",\n//             name: \"John Robot\",\n//             password: \"123123\"\n//         };\n\n//         server.inject({ method: 'POST', url: '/users', payload: user }, (res) => {\n//             assert.equal(201, res.statusCode);\n//             var responseBody: any = JSON.parse(res.payload);\n//             assert.isNotNull(responseBody.token);\n//             done();\n//         });\n//     });\n\n//     it(\"Create user invalid data\", (done) => {\n//         var user = {\n//             email: \"user\",\n//             name: \"John Robot\",\n//             password: \"123123\"\n//         };\n\n//         server.inject({ method: 'POST', url: '/users', payload: user }, (res) => {\n//             assert.equal(400, res.statusCode);\n//             done();\n//         });\n//     });\n\n//     it(\"Create user with same email\", (done) => {\n//         server.inject({ method: 'POST', url: '/users', payload: Utils.createUserDummy() }, (res) => {\n//             assert.equal(500, res.statusCode);\n//             done();\n//         });\n//     });\n\n//     it(\"Get user Info\", (done) => {\n//         var user = Utils.createUserDummy();\n\n//         server.inject({ method: 'POST', url: '/users/login', payload: { email: user.email, password: user.password } }, (res) => {\n//             assert.equal(200, res.statusCode);\n//             var login: any = JSON.parse(res.payload);\n\n//             server.inject({ method: 'GET', url: '/users/info', headers: { \"authorization\": login.token } }, (res) => {\n//                 assert.equal(200, res.statusCode);\n//                 var responseBody: IUser = <IUser>JSON.parse(res.payload);\n//                 assert.equal(user.email, responseBody.email);\n//                 done();\n//             });\n//         });\n//     });\n\n//     it(\"Get User Info Unauthorized\", (done) => {\n//         server.inject({ method: 'GET', url: '/users/info', headers: { \"authorization\": \"dummy token\" } }, (res) => {\n//             assert.equal(401, res.statusCode);\n//             done();\n//         });\n//     });\n\n\n//     it(\"Delete user\", (done) => {\n//         var user = Utils.createUserDummy();\n\n//         server.inject({ method: 'POST', url: '/users/login', payload: { email: user.email, password: user.password } }, (res) => {\n//             assert.equal(200, res.statusCode);\n//             var login: any = JSON.parse(res.payload);\n\n//             server.inject({ method: 'DELETE', url: '/users', headers: { \"authorization\": login.token } }, (res) => {\n//                 assert.equal(200, res.statusCode);\n//                 var responseBody: IUser = <IUser>JSON.parse(res.payload);\n//                 assert.equal(user.email, responseBody.email);\n\n//                 database.userModel.findOne({ \"email\": user.email }).then((deletedUser) => {\n//                     assert.isNull(deletedUser);\n//                     done();\n//                 });\n//             });\n//         });\n//     });\n\n//     it(\"Update user info\", (done) => {\n//         var user = Utils.createUserDummy();\n\n//         server.inject({ method: 'POST', url: '/users/login', payload: { email: user.email, password: user.password } }, (res) => {\n//             assert.equal(200, res.statusCode);\n//             var login: any = JSON.parse(res.payload);\n//             var updateUser = { name: \"New Name\" };\n\n//             server.inject({ method: 'PUT', url: '/users', payload: updateUser, headers: { \"authorization\": login.token } }, (res) => {\n//                 assert.equal(200, res.statusCode);\n//                 var responseBody: IUser = <IUser>JSON.parse(res.payload);\n//                 assert.equal(\"New Name\", responseBody.name);\n//                 done();\n//             });\n//         });\n//     });\n// });\n"]}